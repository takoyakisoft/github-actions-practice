name: System Info

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            job_shell: bash  # キー名を変更
          - os: macos-latest
            job_shell: bash  # キー名を変更
          - os: windows-latest
            job_shell: pwsh  # キー名を変更

    defaults: # ジョブレベルのデフォルトシェルを設定
      run:
        shell: ${{ matrix.job_shell }}

    steps:
      - uses: actions/checkout@v4

      - name: OS バージョンを表示
        # shell は defaults.run.shell を使用
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            lsb_release -a
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            sw_vers
          else # Windows (pwsh)
            Get-ComputerInfo | Select-Object WindowsProductName, WindowsVersion, OsArchitecture
          fi

      - name: CPU 詳細情報を表示
        # shell は defaults.run.shell を使用
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            lscpu
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "Model: $(sysctl -n machdep.cpu.brand_string)"
            echo "Architecture: $(uname -m)"
            echo "Physical Cores: $(sysctl -n hw.physicalcpu)"
            echo "Logical Cores: $(sysctl -n hw.logicalcpu)"
            MAX_FREQ_HZ=$(sysctl -n hw.cpufrequency_max 2>/dev/null)
            [[ -n "$MAX_FREQ_HZ" ]] && echo "Max Frequency: $((MAX_FREQ_HZ / 1000000)) MHz"
          else # Windows (pwsh)
            Get-CimInstance Win32_Processor | Format-List Name, Manufacturer, MaxClockSpeed, NumberOfCores, NumberOfLogicalProcessors, ArchitectureDescription, SocketDesignation, Caption
          fi

      - name: メモリ情報を表示
        # shell は defaults.run.shell を使用
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            free -h
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            top -l 1 -s 0 | grep PhysMem
          else # Windows (pwsh)
            $mem = Get-CimInstance Win32_OperatingSystem
            Write-Output ("Total: {0}GB" -f [math]::Round($mem.TotalVisibleMemorySize/1MB, 2))
            Write-Output ("Free: {0}GB" -f [math]::Round($mem.FreePhysicalMemory/1MB, 2))
          fi

      - name: ストレージ空き容量を表示
        # shell は defaults.run.shell を使用
        run: |
          if [[ "${{ runner.os }}" == "Linux" || "${{ runner.os }}" == "macOS" ]]; then
            df -h
          else # Windows (pwsh)
            Get-Volume | Where-Object DriveLetter | 
              Select-Object DriveLetter, FileSystemLabel, 
                @{Name="Size(GB)";Expression={[math]::Round($_.Size/1GB,2)}}, 
                @{Name="Free(GB)";Expression={[math]::Round($_.SizeRemaining/1GB,2)}} | 
              Format-Table
          fi

      - name: インストール済み開発ツールの確認
        shell: bash # このステップはbashスクリプトとして実行
        run: |
          # ツールチェック用関数
          check_tool() {
            local tool=$1
            local cmd=$2
            echo -n "$tool: "
            if command -v $tool &>/dev/null; then
              eval "$cmd" 2>/dev/null || echo "version check failed"
            else
              echo "not found"
            fi
          }

          # 主要言語ランタイム
          echo "=== Language Runtimes ==="
          check_tool node "node --version"
          check_tool python "python --version || python3 --version"
          check_tool ruby "ruby --version"
          check_tool java "java -version 2>&1 | head -1"
          check_tool go "go version"
          check_tool dotnet "dotnet --list-sdks | tail -1"
          check_tool php "php --version | head -1"
          check_tool perl "perl --version | head -2 | tail -1"
          check_tool lua "lua -v"
          check_tool deno "deno --version | head -1"
          check_tool bun "bun --version"
          
          # コンパイラ & ビルドツール
          echo -e "\n=== Compilers & Build Tools ==="
          check_tool gcc "gcc --version | head -1"
          check_tool g++ "g++ --version | head -1"
          check_tool clang "clang --version | head -1"
          check_tool cmake "cmake --version | head -1"
          check_tool make "make --version | head -1"
          check_tool msbuild "msbuild -version | head -1" # WindowsではPATHにあれば実行可能
          check_tool cargo "cargo --version"
          check_tool rustc "rustc --version"
          check_tool vcpkg "vcpkg version"
          
          # パッケージマネージャー
          echo -e "\n=== Package Managers ==="
          check_tool npm "npm --version"
          check_tool yarn "yarn --version"
          check_tool pip "pip --version | head -1"
          check_tool gem "gem --version"
          check_tool mvn "mvn --version | head -1"
          check_tool gradle "gradle --version | head -1"
          check_tool conan "conan --version"
          
          # クラウド & コンテナ
          echo -e "\n=== Cloud & Container ==="
          check_tool docker "docker --version"
          check_tool kubectl "kubectl version --client --short"
          check_tool helm "helm version --short"
          check_tool aws "aws --version"
          check_tool az "az --version | head -1"
          check_tool gcloud "gcloud --version | head -1"
          
          # モバイル開発
          echo -e "\n=== Mobile Development ==="
          check_tool flutter "flutter --version | head -1"
          check_tool adb "adb --version | head -1"
          
          # データベース
          echo -e "\n=== Databases ==="
          check_tool psql "psql --version"
          check_tool mysql "mysql --version"
          check_tool sqlcmd "sqlcmd -?" # WindowsではPATHにあれば実行可能
          
          # その他ツール
          echo -e "\n=== Utilities ==="
          check_tool git "git --version"
          check_tool curl "curl --version | head -1"
          check_tool wget "wget --version | head -1"
          check_tool jq "jq --version"
          check_tool openssl "openssl version"
          check_tool ssh "ssh -V"
          check_tool ffmpeg "ffmpeg -version | head -1"
          check_tool pandoc "pandoc --version | head -1"
          check_tool terraform "terraform version | head -1"
          check_tool packer "packer --version"
          check_tool ansible "ansible --version | head -1"
          
          # OS固有ツール
          echo -e "\n=== OS-Specific Tools ==="
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            check_tool xcodebuild "xcodebuild -version | head -1"
            check_tool pod "pod --version"
            check_tool brew "brew --version | head -1"
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            # これらはGit Bashから呼び出される
            check_tool pwsh "pwsh --version"
            check_tool choco "choco --version"
            check_tool nuget "nuget help | head -2 | tail -1"
          fi

      - name: Android NDK バージョン確認
        shell: bash # このステップはbashスクリプトとして実行
        run: |
          if [[ -n "$ANDROID_NDK_HOME" ]]; then
            ndk_path="$ANDROID_NDK_HOME"
          elif [[ -n "$ANDROID_NDK_LATEST_HOME" ]]; then
            ndk_path="$ANDROID_NDK_LATEST_HOME"
          else
            ndk_path=""
          fi
          
          if [[ -n "$ndk_path" ]]; then
            echo "Android NDK Path: $ndk_path"
            if [[ -f "$ndk_path/source.properties" ]]; then
              grep "Pkg.Revision" "$ndk_path/source.properties"
            else
              echo "source.properties not found"
            fi
          else
            echo "Android NDK environment variables not set"
          fi

      - name: インストール済みVSエクステンション確認 (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh # このステップはpwshスクリプトとして実行
        run: |
          # Visual Studio のインストールパスを取得 (vswhere.exe は Program Files (x86) にある想定)
          $vsInstallerPath = "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe"
          if (-not (Test-Path $vsInstallerPath)) {
            Write-Host "vswhere.exe not found at $vsInstallerPath"
            # Program Files にある可能性も考慮 (GitHub Hosted Runnerでは (x86) が一般的)
            $vsInstallerPath = "C:\Program Files\Microsoft Visual Studio\Installer\vswhere.exe"
            if (-not (Test-Path $vsInstallerPath)) {
                Write-Host "vswhere.exe not found at $vsInstallerPath either. Skipping VS extension check."
                exit 0
            }
          }

          # Visual Studioのインストール情報を取得
          $vsInfo = & $vsInstallerPath -latest -prerelease -format json | ConvertFrom-Json
          
          if ($null -eq $vsInfo -or $null -eq $vsInfo.installationPath) {
            Write-Host "No Visual Studio installation found by vswhere.exe. Skipping VS extension check."
            exit 0
          }

          $vsixInstallerPath = Join-Path $vsInfo.installationPath "Common7\IDE\vsixinstaller.exe"
          
          if (-not (Test-Path $vsixInstallerPath)) {
            Write-Host "VSIXInstaller.exe not found at $vsixInstallerPath. Skipping VS extension check."
            exit 0
          }

          # インストール済み拡張機能を取得
          # vsixinstaller.exe /list の出力は文字列の配列なので、加工が必要
          $rawExtensionList = & $vsixInstallerPath /list
          $installedExtensions = @()
          $currentExtension = $null

          foreach ($line in $rawExtensionList) {
              if ($line -match "Extension Name\s*:\s*(.+)") {
                  if ($null -ne $currentExtension) {
                      $installedExtensions += $currentExtension
                  }
                  $currentExtension = [PSCustomObject]@{
                      Name = $matches[1].Trim()
                      ID = ""
                      Version = ""
                  }
              } elseif ($currentExtension -ne $null) {
                  if ($line -match "Extension ID\s*:\s*(.+)") {
                      $currentExtension.ID = $matches[1].Trim()
                  } elseif ($line -match "Extension Version\s*:\s*(.+)") {
                      $currentExtension.Version = $matches[1].Trim()
                  }
              }
          }
          if ($null -ne $currentExtension) { # 最後の拡張機能を追加
              $installedExtensions += $currentExtension
          }
          
          if ($installedExtensions.Count -gt 0) {
            Write-Host "Installed VS Extensions:"
            $installedExtensions | Format-Table -AutoSize
          } else {
            Write-Host "No VS extensions found or VSIXInstaller output format changed."
          }
